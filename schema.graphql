# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  board(
    where: BoardWhereInput! = {}
    orderBy: [BoardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Board!]
  boardCount(where: BoardWhereInput! = {}): Int
  member(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  memberCount(where: MemberWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  board: BoardManyRelationFilter
  member: MemberManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BoardManyRelationFilter {
  every: BoardWhereInput
  some: BoardWhereInput
  none: BoardWhereInput
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  board: BoardRelateToManyForUpdateInput
  member: MemberRelateToManyForUpdateInput
}

input BoardRelateToManyForUpdateInput {
  disconnect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  create: [BoardCreateInput!]
  connect: [BoardWhereUniqueInput!]
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  board: BoardRelateToManyForCreateInput
  member: MemberRelateToManyForCreateInput
}

input BoardRelateToManyForCreateInput {
  create: [BoardCreateInput!]
  connect: [BoardWhereUniqueInput!]
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

type Board {
  id: ID!
  name: String
  section(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  sectionCount(where: SectionWhereInput! = {}): Int
  user: User
}

input BoardWhereUniqueInput {
  id: ID
  name: String
}

input BoardWhereInput {
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  NOT: [BoardWhereInput!]
  id: IDFilter
  name: StringFilter
  section: SectionManyRelationFilter
  user: UserWhereInput
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input BoardOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input BoardUpdateInput {
  name: String
  section: SectionRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BoardUpdateArgs {
  where: BoardWhereUniqueInput!
  data: BoardUpdateInput!
}

input BoardCreateInput {
  name: String
  section: SectionRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Task {
  id: ID!
  title: String
  priority: TaskPriorityType
  publishedAt: DateTime
  isComplete: Boolean
  assignedTo(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  assignedToCount(where: MemberWhereInput! = {}): Int
  description: String
  section: Section
}

enum TaskPriorityType {
  low
  medium
  high
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TaskWhereUniqueInput {
  id: ID
  title: String
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  title: StringFilter
  priority: TaskPriorityTypeNullableFilter
  publishedAt: DateTimeNullableFilter
  isComplete: BooleanFilter
  assignedTo: MemberManyRelationFilter
  description: StringFilter
  section: SectionWhereInput
}

input TaskPriorityTypeNullableFilter {
  equals: TaskPriorityType
  in: [TaskPriorityType!]
  notIn: [TaskPriorityType!]
  not: TaskPriorityTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  title: OrderDirection
  priority: OrderDirection
  publishedAt: OrderDirection
  isComplete: OrderDirection
  description: OrderDirection
}

input TaskUpdateInput {
  title: String
  priority: TaskPriorityType
  publishedAt: DateTime
  isComplete: Boolean
  assignedTo: MemberRelateToManyForUpdateInput
  description: String
  section: SectionRelateToOneForUpdateInput
}

input SectionRelateToOneForUpdateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  title: String
  priority: TaskPriorityType
  publishedAt: DateTime
  isComplete: Boolean
  assignedTo: MemberRelateToManyForCreateInput
  description: String
  section: SectionRelateToOneForCreateInput
}

input SectionRelateToOneForCreateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

type Section {
  id: ID!
  name: String
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
  board: Board
}

input SectionWhereUniqueInput {
  id: ID
  name: String
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  tasks: TaskManyRelationFilter
  board: BoardWhereInput
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SectionUpdateInput {
  name: String
  tasks: TaskRelateToManyForUpdateInput
  board: BoardRelateToOneForUpdateInput
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input BoardRelateToOneForUpdateInput {
  create: BoardCreateInput
  connect: BoardWhereUniqueInput
  disconnect: Boolean
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  tasks: TaskRelateToManyForCreateInput
  board: BoardRelateToOneForCreateInput
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input BoardRelateToOneForCreateInput {
  create: BoardCreateInput
  connect: BoardWhereUniqueInput
}

type Member {
  id: ID!
  name: String
  email: String
  password: PasswordState
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
  leader: User
}

input MemberWhereUniqueInput {
  id: ID
  email: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  tasks: TaskManyRelationFilter
  leader: UserWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input MemberOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input MemberUpdateInput {
  name: String
  email: String
  password: String
  tasks: TaskRelateToManyForUpdateInput
  leader: UserRelateToOneForUpdateInput
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  name: String
  email: String
  password: String
  tasks: TaskRelateToManyForCreateInput
  leader: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBoard(data: BoardCreateInput!): Board
  createBoards(data: [BoardCreateInput!]!): [Board]
  updateBoard(where: BoardWhereUniqueInput!, data: BoardUpdateInput!): Board
  updateBoards(data: [BoardUpdateArgs!]!): [Board]
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteBoards(where: [BoardWhereUniqueInput!]!): [Board]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(
    where: SectionWhereUniqueInput!
    data: SectionUpdateInput!
  ): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  boards(
    where: BoardWhereInput! = {}
    orderBy: [BoardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Board!]
  board(where: BoardWhereUniqueInput!): Board
  boardsCount(where: BoardWhereInput! = {}): Int
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
