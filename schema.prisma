// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String   @id @default(uuid()) @postgresql.Uuid
  name     String   @default("")
  email    String   @unique @default("")
  password String
  isAdmin  Boolean  @default(true)
  board    Board[]  @relation("Board_user")
  member   Member[] @relation("Member_leader")
}

model Board {
  id      String    @id @default(uuid()) @postgresql.Uuid
  name    String    @unique @default("")
  section Section[] @relation("Section_board")
  user    User?     @relation("Board_user", fields: [userId], references: [id])
  userId  String?   @map("user") @postgresql.Uuid

  @@index([userId])
}

model Task {
  id          String            @id @default(uuid()) @postgresql.Uuid
  title       String            @unique @default("")
  priority    TaskPriorityType?
  publishedAt DateTime?         @default(now())
  isComplete  Boolean           @default(false)
  assignedTo  Member[]          @relation("Member_tasks")
  description String            @default("")
  section     Section?          @relation("Task_section", fields: [sectionId], references: [id])
  sectionId   String?           @map("section") @postgresql.Uuid

  @@index([sectionId])
}

model Section {
  id      String  @id @default(uuid()) @postgresql.Uuid
  name    String  @unique @default("")
  tasks   Task[]  @relation("Task_section")
  board   Board?  @relation("Section_board", fields: [boardId], references: [id])
  boardId String? @map("board") @postgresql.Uuid

  @@index([boardId])
}

model Member {
  id       String  @id @default(uuid()) @postgresql.Uuid
  name     String  @default("")
  email    String  @unique @default("")
  password String?
  tasks    Task[]  @relation("Member_tasks")
  leader   User?   @relation("Member_leader", fields: [leaderId], references: [id])
  leaderId String? @map("leader") @postgresql.Uuid

  @@index([leaderId])
}

enum TaskPriorityType {
  low
  medium
  high
}